/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testhsql.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testhsql.sales.*;


/**
 * ServiceImpl object for domain model class AccountManager.
 * @see com.testhsql.sales.AccountManager
 */
@Service("sales.AccountManagerService")
public class AccountManagerServiceImpl implements AccountManagerService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AccountManagerServiceImpl.class);

    @Autowired
    @Qualifier("sales.AccountManagerDao")
    private WMGenericDao<AccountManager, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AccountManager, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "salesTransactionManager")
     public Page<AccountManager> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "salesTransactionManager")
    @Override
    public AccountManager create(AccountManager accountmanager) {
        LOGGER.debug("Creating a new accountmanager with information: {}" , accountmanager);
        return this.wmGenericDao.create(accountmanager);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "salesTransactionManager")
    @Override
    public AccountManager delete(Integer accountmanagerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting accountmanager with id: {}" , accountmanagerId);
        AccountManager deleted = this.wmGenericDao.findById(accountmanagerId);
        if (deleted == null) {
            LOGGER.debug("No accountmanager found with id: {}" , accountmanagerId);
            throw new EntityNotFoundException(String.valueOf(accountmanagerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<AccountManager> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all accountmanagers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<AccountManager> findAll(Pageable pageable) {
        LOGGER.debug("Finding all accountmanagers");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public AccountManager findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding accountmanager by id: {}" , id);
        AccountManager accountmanager=this.wmGenericDao.findById(id);
        if(accountmanager==null){
            LOGGER.debug("No accountmanager found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return accountmanager;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "salesTransactionManager")
    @Override
    public AccountManager update(AccountManager updated) throws EntityNotFoundException {
        LOGGER.debug("Updating accountmanager with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


