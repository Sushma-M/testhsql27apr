/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testhsql.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testhsql.sales.*;


/**
 * ServiceImpl object for domain model class VenueDetail.
 * @see com.testhsql.sales.VenueDetail
 */
@Service("sales.VenueDetailService")
public class VenueDetailServiceImpl implements VenueDetailService {


    private static final Logger LOGGER = LoggerFactory.getLogger(VenueDetailServiceImpl.class);

    @Autowired
    @Qualifier("sales.VenueDetailDao")
    private WMGenericDao<VenueDetail, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VenueDetail, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "salesTransactionManager")
     public Page<VenueDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "salesTransactionManager")
    @Override
    public VenueDetail create(VenueDetail venuedetail) {
        LOGGER.debug("Creating a new venuedetail with information: {}" , venuedetail);
        return this.wmGenericDao.create(venuedetail);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "salesTransactionManager")
    @Override
    public VenueDetail delete(Integer venuedetailId) throws EntityNotFoundException {
        LOGGER.debug("Deleting venuedetail with id: {}" , venuedetailId);
        VenueDetail deleted = this.wmGenericDao.findById(venuedetailId);
        if (deleted == null) {
            LOGGER.debug("No venuedetail found with id: {}" , venuedetailId);
            throw new EntityNotFoundException(String.valueOf(venuedetailId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<VenueDetail> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all venuedetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<VenueDetail> findAll(Pageable pageable) {
        LOGGER.debug("Finding all venuedetails");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public VenueDetail findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding venuedetail by id: {}" , id);
        VenueDetail venuedetail=this.wmGenericDao.findById(id);
        if(venuedetail==null){
            LOGGER.debug("No venuedetail found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return venuedetail;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "salesTransactionManager")
    @Override
    public VenueDetail update(VenueDetail updated) throws EntityNotFoundException {
        LOGGER.debug("Updating venuedetail with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


