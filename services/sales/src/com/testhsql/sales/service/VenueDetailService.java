/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testhsql.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testhsql.sales.*;

/**
 * Service object for domain model class VenueDetail.
 * @see com.testhsql.sales.VenueDetail
 */

public interface VenueDetailService {
   /**
	 * Creates a new venuedetail.
	 * 
	 * @param created
	 *            The information of the created venuedetail.
	 * @return The created venuedetail.
	 */
	public VenueDetail create(VenueDetail created);

	/**
	 * Deletes a venuedetail.
	 * 
	 * @param venuedetailId
	 *            The id of the deleted venuedetail.
	 * @return The deleted venuedetail.
	 * @throws EntityNotFoundException
	 *             if no venuedetail is found with the given id.
	 */
	public VenueDetail delete(Integer venuedetailId) throws EntityNotFoundException;

	/**
	 * Finds all venuedetails.
	 * 
	 * @return A list of venuedetails.
	 */
	public Page<VenueDetail> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<VenueDetail> findAll(Pageable pageable);
	
	/**
	 * Finds venuedetail by id.
	 * 
	 * @param id
	 *            The id of the wanted venuedetail.
	 * @return The found venuedetail. If no venuedetail is found, this method returns
	 *         null.
	 */
	public VenueDetail findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a venuedetail.
	 * 
	 * @param updated
	 *            The information of the updated venuedetail.
	 * @return The updated venuedetail.
	 * @throws EntityNotFoundException
	 *             if no venuedetail is found with given id.
	 */
	public VenueDetail update(VenueDetail updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the venuedetails in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the venuedetail.
	 */

	public long countAll();


    public Page<VenueDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

