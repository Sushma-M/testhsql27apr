/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testhsql.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testhsql.sales.*;

/**
 * Service object for domain model class Productcatalog.
 * @see com.testhsql.sales.Productcatalog
 */

public interface ProductcatalogService {
   /**
	 * Creates a new productcatalog.
	 * 
	 * @param created
	 *            The information of the created productcatalog.
	 * @return The created productcatalog.
	 */
	public Productcatalog create(Productcatalog created);

	/**
	 * Deletes a productcatalog.
	 * 
	 * @param productcatalogId
	 *            The id of the deleted productcatalog.
	 * @return The deleted productcatalog.
	 * @throws EntityNotFoundException
	 *             if no productcatalog is found with the given id.
	 */
	public Productcatalog delete(Integer productcatalogId) throws EntityNotFoundException;

	/**
	 * Finds all productcatalogs.
	 * 
	 * @return A list of productcatalogs.
	 */
	public Page<Productcatalog> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Productcatalog> findAll(Pageable pageable);
	
	/**
	 * Finds productcatalog by id.
	 * 
	 * @param id
	 *            The id of the wanted productcatalog.
	 * @return The found productcatalog. If no productcatalog is found, this method returns
	 *         null.
	 */
	public Productcatalog findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a productcatalog.
	 * 
	 * @param updated
	 *            The information of the updated productcatalog.
	 * @return The updated productcatalog.
	 * @throws EntityNotFoundException
	 *             if no productcatalog is found with given id.
	 */
	public Productcatalog update(Productcatalog updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the productcatalogs in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the productcatalog.
	 */

	public long countAll();


    public Page<Productcatalog> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

