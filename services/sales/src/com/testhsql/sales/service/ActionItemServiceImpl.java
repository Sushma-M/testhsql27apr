/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testhsql.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testhsql.sales.*;


/**
 * ServiceImpl object for domain model class ActionItem.
 * @see com.testhsql.sales.ActionItem
 */
@Service("sales.ActionItemService")
public class ActionItemServiceImpl implements ActionItemService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ActionItemServiceImpl.class);

    @Autowired
    @Qualifier("sales.ActionItemDao")
    private WMGenericDao<ActionItem, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ActionItem, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "salesTransactionManager")
     public Page<ActionItem> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "salesTransactionManager")
    @Override
    public ActionItem create(ActionItem actionitem) {
        LOGGER.debug("Creating a new actionitem with information: {}" , actionitem);
        return this.wmGenericDao.create(actionitem);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "salesTransactionManager")
    @Override
    public ActionItem delete(Integer actionitemId) throws EntityNotFoundException {
        LOGGER.debug("Deleting actionitem with id: {}" , actionitemId);
        ActionItem deleted = this.wmGenericDao.findById(actionitemId);
        if (deleted == null) {
            LOGGER.debug("No actionitem found with id: {}" , actionitemId);
            throw new EntityNotFoundException(String.valueOf(actionitemId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<ActionItem> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all actionitems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<ActionItem> findAll(Pageable pageable) {
        LOGGER.debug("Finding all actionitems");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public ActionItem findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding actionitem by id: {}" , id);
        ActionItem actionitem=this.wmGenericDao.findById(id);
        if(actionitem==null){
            LOGGER.debug("No actionitem found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return actionitem;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "salesTransactionManager")
    @Override
    public ActionItem update(ActionItem updated) throws EntityNotFoundException {
        LOGGER.debug("Updating actionitem with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


