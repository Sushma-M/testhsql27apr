/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testhsql.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testhsql.sales.*;


/**
 * ServiceImpl object for domain model class Year.
 * @see com.testhsql.sales.Year
 */
@Service("sales.YearService")
public class YearServiceImpl implements YearService {


    private static final Logger LOGGER = LoggerFactory.getLogger(YearServiceImpl.class);

    @Autowired
    @Qualifier("sales.YearDao")
    private WMGenericDao<Year, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Year, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "salesTransactionManager")
     public Page<Year> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "salesTransactionManager")
    @Override
    public Year create(Year year) {
        LOGGER.debug("Creating a new year with information: {}" , year);
        return this.wmGenericDao.create(year);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "salesTransactionManager")
    @Override
    public Year delete(Integer yearId) throws EntityNotFoundException {
        LOGGER.debug("Deleting year with id: {}" , yearId);
        Year deleted = this.wmGenericDao.findById(yearId);
        if (deleted == null) {
            LOGGER.debug("No year found with id: {}" , yearId);
            throw new EntityNotFoundException(String.valueOf(yearId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<Year> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all years");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<Year> findAll(Pageable pageable) {
        LOGGER.debug("Finding all years");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Year findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding year by id: {}" , id);
        Year year=this.wmGenericDao.findById(id);
        if(year==null){
            LOGGER.debug("No year found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return year;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "salesTransactionManager")
    @Override
    public Year update(Year updated) throws EntityNotFoundException {
        LOGGER.debug("Updating year with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


