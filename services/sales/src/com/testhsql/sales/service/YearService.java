/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testhsql.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testhsql.sales.*;

/**
 * Service object for domain model class Year.
 * @see com.testhsql.sales.Year
 */

public interface YearService {
   /**
	 * Creates a new year.
	 * 
	 * @param created
	 *            The information of the created year.
	 * @return The created year.
	 */
	public Year create(Year created);

	/**
	 * Deletes a year.
	 * 
	 * @param yearId
	 *            The id of the deleted year.
	 * @return The deleted year.
	 * @throws EntityNotFoundException
	 *             if no year is found with the given id.
	 */
	public Year delete(Integer yearId) throws EntityNotFoundException;

	/**
	 * Finds all years.
	 * 
	 * @return A list of years.
	 */
	public Page<Year> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Year> findAll(Pageable pageable);
	
	/**
	 * Finds year by id.
	 * 
	 * @param id
	 *            The id of the wanted year.
	 * @return The found year. If no year is found, this method returns
	 *         null.
	 */
	public Year findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a year.
	 * 
	 * @param updated
	 *            The information of the updated year.
	 * @return The updated year.
	 * @throws EntityNotFoundException
	 *             if no year is found with given id.
	 */
	public Year update(Year updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the years in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the year.
	 */

	public long countAll();


    public Page<Year> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

