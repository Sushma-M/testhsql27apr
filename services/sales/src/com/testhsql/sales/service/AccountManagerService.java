/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testhsql.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testhsql.sales.*;

/**
 * Service object for domain model class AccountManager.
 * @see com.testhsql.sales.AccountManager
 */

public interface AccountManagerService {
   /**
	 * Creates a new accountmanager.
	 * 
	 * @param created
	 *            The information of the created accountmanager.
	 * @return The created accountmanager.
	 */
	public AccountManager create(AccountManager created);

	/**
	 * Deletes a accountmanager.
	 * 
	 * @param accountmanagerId
	 *            The id of the deleted accountmanager.
	 * @return The deleted accountmanager.
	 * @throws EntityNotFoundException
	 *             if no accountmanager is found with the given id.
	 */
	public AccountManager delete(Integer accountmanagerId) throws EntityNotFoundException;

	/**
	 * Finds all accountmanagers.
	 * 
	 * @return A list of accountmanagers.
	 */
	public Page<AccountManager> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AccountManager> findAll(Pageable pageable);
	
	/**
	 * Finds accountmanager by id.
	 * 
	 * @param id
	 *            The id of the wanted accountmanager.
	 * @return The found accountmanager. If no accountmanager is found, this method returns
	 *         null.
	 */
	public AccountManager findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a accountmanager.
	 * 
	 * @param updated
	 *            The information of the updated accountmanager.
	 * @return The updated accountmanager.
	 * @throws EntityNotFoundException
	 *             if no accountmanager is found with given id.
	 */
	public AccountManager update(AccountManager updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the accountmanagers in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the accountmanager.
	 */

	public long countAll();


    public Page<AccountManager> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

