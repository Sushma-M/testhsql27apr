/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testhsql.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testhsql.sales.*;

/**
 * Service object for domain model class Sale.
 * @see com.testhsql.sales.Sale
 */

public interface SaleService {
   /**
	 * Creates a new sale.
	 * 
	 * @param created
	 *            The information of the created sale.
	 * @return The created sale.
	 */
	public Sale create(Sale created);

	/**
	 * Deletes a sale.
	 * 
	 * @param saleId
	 *            The id of the deleted sale.
	 * @return The deleted sale.
	 * @throws EntityNotFoundException
	 *             if no sale is found with the given id.
	 */
	public Sale delete(Integer saleId) throws EntityNotFoundException;

	/**
	 * Finds all sales.
	 * 
	 * @return A list of sales.
	 */
	public Page<Sale> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Sale> findAll(Pageable pageable);
	
	/**
	 * Finds sale by id.
	 * 
	 * @param id
	 *            The id of the wanted sale.
	 * @return The found sale. If no sale is found, this method returns
	 *         null.
	 */
	public Sale findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a sale.
	 * 
	 * @param updated
	 *            The information of the updated sale.
	 * @return The updated sale.
	 * @throws EntityNotFoundException
	 *             if no sale is found with given id.
	 */
	public Sale update(Sale updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the sales in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the sale.
	 */

	public long countAll();


    public Page<Sale> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

