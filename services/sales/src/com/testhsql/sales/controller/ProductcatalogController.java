/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testhsql.sales.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.testhsql.sales.service.ProductcatalogService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.testhsql.sales.*;
import com.testhsql.sales.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Productcatalog.
 * @see com.testhsql.sales.Productcatalog
 */
@RestController(value = "Sales.ProductcatalogController")
@RequestMapping("/sales/Productcatalog")
@Api(description = "Exposes APIs to work with Productcatalog resource.", value = "ProductcatalogController")
public class ProductcatalogController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductcatalogController.class);

    @Autowired
    @Qualifier("sales.ProductcatalogService")
    private ProductcatalogService productcatalogService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Productcatalog instances matching the search criteria.")
    public Page<Productcatalog> findProductcatalogs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Productcatalogs list");
        return productcatalogService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Productcatalog instances.")
    public Page<Productcatalog> getProductcatalogs(Pageable pageable) {
        LOGGER.debug("Rendering Productcatalogs list");
        return productcatalogService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setProductcatalogService(ProductcatalogService service) {
        this.productcatalogService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Productcatalog instance.")
    public Productcatalog createProductcatalog(@RequestBody Productcatalog instance) {
        LOGGER.debug("Create Productcatalog with information: {}", instance);
        instance = productcatalogService.create(instance);
        LOGGER.debug("Created Productcatalog with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Productcatalog instances.")
    public Long countAllProductcatalogs() {
        LOGGER.debug("counting Productcatalogs");
        Long count = productcatalogService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Productcatalog instance associated with the given id.")
    public Productcatalog getProductcatalog(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Productcatalog with id: {}", id);
        Productcatalog instance = productcatalogService.findById(id);
        LOGGER.debug("Productcatalog details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Productcatalog instance associated with the given id.")
    public Productcatalog editProductcatalog(@PathVariable(value = "id") Integer id, @RequestBody Productcatalog instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Productcatalog with id: {}", instance.getProductId());
        instance.setProductId(id);
        instance = productcatalogService.update(instance);
        LOGGER.debug("Productcatalog details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Productcatalog instance associated with the given id.")
    public boolean deleteProductcatalog(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Productcatalog with id: {}", id);
        Productcatalog deleted = productcatalogService.delete(id);
        return deleted != null;
    }
}
