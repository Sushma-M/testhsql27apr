/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testhsql.sales.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.testhsql.sales.service.ActionItemService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.testhsql.sales.*;
import com.testhsql.sales.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ActionItem.
 * @see com.testhsql.sales.ActionItem
 */
@RestController(value = "Sales.ActionItemController")
@RequestMapping("/sales/ActionItem")
@Api(description = "Exposes APIs to work with ActionItem resource.", value = "ActionItemController")
public class ActionItemController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActionItemController.class);

    @Autowired
    @Qualifier("sales.ActionItemService")
    private ActionItemService actionItemService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ActionItem instances matching the search criteria.")
    public Page<ActionItem> findActionItems(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ActionItems list");
        return actionItemService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ActionItem instances.")
    public Page<ActionItem> getActionItems(Pageable pageable) {
        LOGGER.debug("Rendering ActionItems list");
        return actionItemService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setActionItemService(ActionItemService service) {
        this.actionItemService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ActionItem instance.")
    public ActionItem createActionItem(@RequestBody ActionItem instance) {
        LOGGER.debug("Create ActionItem with information: {}", instance);
        instance = actionItemService.create(instance);
        LOGGER.debug("Created ActionItem with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ActionItem instances.")
    public Long countAllActionItems() {
        LOGGER.debug("counting ActionItems");
        Long count = actionItemService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ActionItem instance associated with the given id.")
    public ActionItem getActionItem(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ActionItem with id: {}", id);
        ActionItem instance = actionItemService.findById(id);
        LOGGER.debug("ActionItem details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ActionItem instance associated with the given id.")
    public ActionItem editActionItem(@PathVariable(value = "id") Integer id, @RequestBody ActionItem instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ActionItem with id: {}", instance.getId());
        instance.setId(id);
        instance = actionItemService.update(instance);
        LOGGER.debug("ActionItem details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ActionItem instance associated with the given id.")
    public boolean deleteActionItem(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ActionItem with id: {}", id);
        ActionItem deleted = actionItemService.delete(id);
        return deleted != null;
    }
}
