/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testhsql.sales.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.testhsql.sales.service.AccountManagerService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.testhsql.sales.*;
import com.testhsql.sales.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AccountManager.
 * @see com.testhsql.sales.AccountManager
 */
@RestController(value = "Sales.AccountManagerController")
@RequestMapping("/sales/AccountManager")
@Api(description = "Exposes APIs to work with AccountManager resource.", value = "AccountManagerController")
public class AccountManagerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountManagerController.class);

    @Autowired
    @Qualifier("sales.AccountManagerService")
    private AccountManagerService accountManagerService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AccountManager instances matching the search criteria.")
    public Page<AccountManager> findAccountManagers(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AccountManagers list");
        return accountManagerService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AccountManager instances.")
    public Page<AccountManager> getAccountManagers(Pageable pageable) {
        LOGGER.debug("Rendering AccountManagers list");
        return accountManagerService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setAccountManagerService(AccountManagerService service) {
        this.accountManagerService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AccountManager instance.")
    public AccountManager createAccountManager(@RequestBody AccountManager instance) {
        LOGGER.debug("Create AccountManager with information: {}", instance);
        instance = accountManagerService.create(instance);
        LOGGER.debug("Created AccountManager with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AccountManager instances.")
    public Long countAllAccountManagers() {
        LOGGER.debug("counting AccountManagers");
        Long count = accountManagerService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AccountManager instance associated with the given id.")
    public AccountManager getAccountManager(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AccountManager with id: {}", id);
        AccountManager instance = accountManagerService.findById(id);
        LOGGER.debug("AccountManager details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AccountManager instance associated with the given id.")
    public AccountManager editAccountManager(@PathVariable(value = "id") Integer id, @RequestBody AccountManager instance) throws EntityNotFoundException {
        LOGGER.debug("Editing AccountManager with id: {}", instance.getId());
        instance.setId(id);
        instance = accountManagerService.update(instance);
        LOGGER.debug("AccountManager details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the AccountManager instance associated with the given id.")
    public boolean deleteAccountManager(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AccountManager with id: {}", id);
        AccountManager deleted = accountManagerService.delete(id);
        return deleted != null;
    }
}
